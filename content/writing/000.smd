---
.title = "000 - segfaulting my blog",
.date = @date("2025-07-03"),
.author = "nukkeldev",
.layout = "article.shtml",
.draft = false,
---

> ### [Disclaimer]($block)
> This article was a way for me to explore the features of `zine`, so it's not particularly cohesive.

## Prelude

In the process of developing [`garden`](https://github.com/nukkeldev/garden), I've been writing lots of notes rambling 
about various things: mostly progress updates with the engine, but sometimes cool language features, libraries, pieces 
of documentation, or brief rabbit-holes. 

I've been wanting to make a website for myself for a while to publish my ramblings. 
A website that would serve both as a means of improving my writing and an archive of the development of myself and my 
projects.
Up to this point though, I hadn't felt like I had content worth writing about. 

I have been using [Zig](https://ziglang.org/) as my primary programming language for the last couple months, and in that 
time, besides falling in love with it for a multitude of reasons, one aspect of it that I began to enjoy quite a bit was 
re-packaging `C/C++` software using Zig's build system (this itself is deserving of it's own article that I may write at
a later date.)

While searching for dependencies already packaged with Zig in the process of packaging [Slang](https://github.com/nukkeldev/slang) 
(that project has been put on hold currently), I learned of [AYC](https://github.com/AllYourCodebase/), a Github 
organization that is a treasure-trove of already packaged libraries (many of which I actually needed.)
From this organization, I found, [Loris Cro](https://github.com/kristoff-it). An active contributor to Zig's ecosystem, 
as well as the VP of Community [@ziglang](https://github.com/ziglang). 
Coincidentally, discovering one of his most recent projects was the push I needed to say "_Fuck It_" and start writing.

## Zine

[Zine](https://zine-ssg.io/) is a **Static Site Generator (SSG)** that uses super-sets of Markdown and HTML (cleverly 
named _SuperMD_ and _SuperHTML_) for content and layout respectively. I don't have much experience with SSGs, so I am not 
able to provide a comparison to other popular SSG tooling. My initial attraction to it was simply because it was written 
in Zig and would serve as a good project to learn from and contribute to. Once I actually used the tool though, I realized
that it was extremely flexible and unique.

For more information about the tool itself, please refer to it's website linked above or it's [Github repository](https://github.com/kristoff-it/zine).
It is current in alpha so instability is expected.

> []($block)
> During my usage of `zine` I have experienced multiple segfaults that I have yet to fully diagnose.
> Two that happened on my first usage of `zine init` and `zine release` were investigated further.
> I tried to replicate both of the segfaults but was not able to reliably. 
> The program segfault'd seemingly only when I copied the executable to another folder with a different name _some of the time_, 
> which also makes me think that those occurrences were also just coincidence.
> When I was able to make it segfault, I didn't have the proper tooling to debug it as it only seems to happen on Windows, 
> nor did it appear to happen in `Debug` mode. Seeing as this happened very rarely and there being no existing bug reports 
> related, I don't think it's a major issue and it is quite likely it was my own machine that caused the issues rather 
> than `zine` itself.

## SuperHTML

[SuperHTML](https://zine-ssg.io/docs/superhtml/) is quite a unique templating language. 
All SuperHTML is syntactically valid HTML, akin to something like [HTMX](https://htmx.org/), with the templating logic 
coming from elements' attributes.
It supports conditionals, loops, function calls and field access via `Scripty`, and composing `.shtml` files together; 
all of which can be combined to create arbitrarily complex behavior based on the content of the site.

See the documentation for a full explanation of it's features. Below I have listed a couple of interesting usages of it:
- Looping to generate the article list in [writing](/writing), differentiating whether they're drafts.
```shtml
<ul :loop="$page.subpages()">
    <div :if="$loop.it.draft.not()">
        <li>
            <a href="$loop.it.link()" :text="$loop.it.title"></a>
        </li>
    </div>
</ul>
```
- Indicating whether a page is a draft using conditionals (see the element under the `<nav>` at the top).
```shtml
<div :if="$page.draft.not()">
    <p class="separator">&lt;--&gt;</p>
</div>
<div :if="$page.draft">
    <p class="separator draft">&lt;-[draft in progress]-&gt;</p>
</div>
```
- Article navigation.
```shtml
<div class="article-nav">
    <div :if="$page.prevPage?()"><a href="$if.link()">prev</a>|</div>
    <div :if="$page.hasPrev().not()">prev|</div>
    <a href="$page.parentSection().link()">up</a>
    <div :if="$page.nextPage?()">|<a href="$if.link()">next</a></div>
    <div :if="$page.hasNext().not()">|next</div>
</div>
```
- Article estimated word count.
```shtml
<p>[Words: <ctx :text="$page.wordCount()"></ctx>]</p>
```

## SuperMD

[SuperMD](https://zine-ssg.io/docs/supermd/) turns Markdown into a fully fleshed out markup language (ironic.)
It focuses purely on the content and leaves the layout to `SuperHTML`, which does the opposite.
From my brief usage of it, it feels like a cut down version of [Typst](https://typst.app/) with only the essentails for
content, which is quite nice.

I don't have any particular examples, nor should I (for what SuperMD is meant for), but please refer to the documentation
for usage details.

## Closing Thoughts

I've really enjoyed using `zine` so far. It's feature-set isn't bloated, it's performant (most of the time), and it's
intuitive to use. I've only been using it for a day or two as of writing this article, but I hope to enjoy my time with
it in the future even more than my first impressions.

Off to diagnosing those segfaults, **bye bye**.